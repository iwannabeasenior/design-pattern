package com.example.designpattern.structuralpatterns
/*
    @Date: 18/02/2025
    @Written by: Nguyen Trung Thanh
*/

/*
üìå Khi n√†o s·ª≠ d·ª•ng Decorator Pattern?
    Khi b·∫°n mu·ªën m·ªü r·ªông h√†nh vi c·ªßa m·ªôt ƒë·ªëi t∆∞·ª£ng m√† kh√¥ng thay ƒë·ªïi n√≥.
    Khi b·∫°n mu·ªën th√™m nhi·ªÅu ch·ª©c nƒÉng kh√°c nhau m√† v·∫´n gi·ªØ ƒë∆∞·ª£c t√≠nh linh ho·∫°t v√† d·ªÖ b·∫£o tr√¨.
    Khi b·∫°n mu·ªën tr√°nh k·∫ø th·ª´a nhi·ªÅu l·ªõp con, v√¨ k·∫ø th·ª´a c√≥ th·ªÉ l√†m tƒÉng s·ª± ph·ª©c t·∫°p.
*/

interface Coffee {
    fun cost(): Double
    fun description(): String
}
class BasicCoffee : Coffee {
    override fun cost() = 5.0
    override fun description() = "Basic Coffee"
}
abstract class CoffeeDecorator(private val coffee: Coffee) : Coffee {
    override fun cost(): Double = coffee.cost()
    override fun description(): String = coffee.description()
}
class MilkDecorator(coffee: Coffee) : CoffeeDecorator(coffee) {
    override fun cost(): Double = super.cost() + 2.0
    override fun description(): String = super.description() + ", with Milk"
}
class SugarDecorator(coffee: Coffee) : CoffeeDecorator(coffee) {
    override fun cost(): Double = super.cost() + 1.0
    override fun description(): String = super.description() + ", with Sugar"
}
fun main() {
    val basicCoffee = BasicCoffee()
    println("${basicCoffee.description()} costs ${basicCoffee.cost()}")

    val milkCoffee = MilkDecorator(basicCoffee)
    println("${milkCoffee.description()} costs ${milkCoffee.cost()}")

    val sugarMilkCoffee = SugarDecorator(milkCoffee)
    println("${sugarMilkCoffee.description()} costs ${sugarMilkCoffee.cost()}")
}
