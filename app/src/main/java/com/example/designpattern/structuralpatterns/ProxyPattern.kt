package com.example.designpattern.structuralpatterns


/*
    @Date: 18/02/2025
    @Written by: Nguyen Trung Thanh
*/

/*
Proxy Pattern l√† m·ªôt m·∫´u thi·∫øt k·∫ø thu·ªôc nh√≥m C·∫•u tr√∫c (Structural Pattern).
M·∫´u thi·∫øt k·∫ø n√†y cung c·∫•p m·ªôt ƒë·ªëi t∆∞·ª£ng thay th·∫ø (proxy) cho m·ªôt ƒë·ªëi t∆∞·ª£ng th·∫≠t, cho ph√©p ki·ªÉm so√°t vi·ªác truy c·∫≠p v√†o ƒë·ªëi t∆∞·ª£ng th·∫≠t.
Proxy c√≥ th·ªÉ th·ª±c hi·ªán c√°c nhi·ªám v·ª• nh∆∞ ki·ªÉm tra quy·ªÅn truy c·∫≠p, qu·∫£n l√Ω t√†i nguy√™n, ho·∫∑c tr√¨ ho√£n vi·ªác kh·ªüi t·∫°o c·ªßa ƒë·ªëi t∆∞·ª£ng th·∫≠t cho ƒë·∫øn khi c·∫ßn thi·∫øt.

üìå Khi n√†o s·ª≠ d·ª•ng Proxy Pattern?

    Khi b·∫°n c·∫ßn ki·ªÉm so√°t quy·ªÅn truy c·∫≠p v√†o ƒë·ªëi t∆∞·ª£ng.
    Khi b·∫°n mu·ªën th·ª±c hi·ªán lazily load (tr√¨ ho√£n kh·ªüi t·∫°o) ƒë·ªëi t∆∞·ª£ng.
    Khi b·∫°n mu·ªën gi√°m s√°t ho·∫∑c gia tƒÉng h√†nh vi c·ªßa ƒë·ªëi t∆∞·ª£ng, nh∆∞ cache, logging.

*/

// Example
interface Subject {
    fun request()
}
class RealSubject: Subject {
    override fun request() {
        println("Real Subject: Handling request")
    }
}
class Proxy(private val realSubject: RealSubject) : Subject {
    override fun request() {
        println("Proxy: Checking access before delegating request to RealSubject")
        realSubject.request()
    }
}

// Example 2: Lazy Loading
interface Data {
    fun fetchData(): String
}
class RealData : Data {
    override fun fetchData(): String {
        println("Fetching data from API...")
        return "Data from API"
    }
}
class DataProxy(private val realData: RealData?) : Data {
    private var cachedData: String? = null

    override fun fetchData(): String {
        // Lazy loading (ch·ªâ t·∫£i d·ªØ li·ªáu khi c·∫ßn)
        if (cachedData == null) {
            cachedData = realData?.fetchData()
        }
        return cachedData ?: "No data available"
    }
}

