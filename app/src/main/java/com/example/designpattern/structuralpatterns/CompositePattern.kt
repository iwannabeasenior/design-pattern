package com.example.designpattern.structuralpatterns


/*
    @Date: 18/02/2025
    @Written by: Nguyen Trung Thanh
*/

/*
Composite Pattern l√† m·ªôt m·∫´u thi·∫øt k·∫ø thu·ªôc nh√≥m C·∫•u tr√∫c (Structural Pattern). N√≥ gi√∫p qu·∫£n l√Ω m·ªôt c·∫•u tr√∫c c√¢y b·∫±ng c√°ch x·ª≠ l√Ω c√°c ƒë·ªëi t∆∞·ª£ng ri√™ng l·∫ª v√† nh√≥m ƒë·ªëi t∆∞·ª£ng theo c√πng m·ªôt c√°ch.

    üìå Khi n√†o n√™n s·ª≠ d·ª•ng Composite Pattern?

    Khi b·∫°n c√≥ c·∫•u tr√∫c ph√¢n c·∫•p (tree-like structure), v√≠ d·ª• nh∆∞ Menu, File System, UI Components.
    Khi b·∫°n mu·ªën x·ª≠ l√Ω c·∫£ ƒë·ªëi t∆∞·ª£ng ƒë∆°n l·∫ª v√† nh√≥m ƒë·ªëi t∆∞·ª£ng theo c√πng m·ªôt c√°ch.
*/


interface FileSystemComponent {
    fun showDetails()
}


class File(private val name: String): FileSystemComponent {
    override fun showDetails() {
        println("File: $name")
    }
}
class Folder(private val name: String): FileSystemComponent {
    private val children = mutableListOf<FileSystemComponent>()

    override fun showDetails() {
        for (child in children) {
            child.showDetails()
        }
    }
    fun add(component: FileSystemComponent) {
        children.add(component)
    }
}

fun main() {
    val file1 = File("file1.png")
    val file2 = File("file2.png")
    val file3 = File("file3.png")

    val folder1 = Folder("My Files")
    folder1.add(file1)
    folder1.add(file2)

    val folder2 = Folder("Media")
    folder2.add(file3)

    val rootFolder = Folder("Root")
    rootFolder.add(folder1)
    rootFolder.add(folder2)

    rootFolder.showDetails()
}