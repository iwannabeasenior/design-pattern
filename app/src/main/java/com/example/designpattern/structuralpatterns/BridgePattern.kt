package com.example.designpattern.structuralpatterns

/*
    @Date: 18/02/2025
    @Written by: Nguyen Trung Thanh
*/

/*
Bridge Pattern l√† m·ªôt m·∫´u thi·∫øt k·∫ø thu·ªôc nh√≥m C·∫•u tr√∫c (Structural Pattern).
N√≥ gi√∫p t√°ch bi·ªát ph·∫ßn tr·ª´u t∆∞·ª£ng (Abstraction) v√† ph·∫ßn tri·ªÉn khai (Implementation) ƒë·ªÉ c·∫£ hai c√≥ th·ªÉ ph√°t tri·ªÉn ƒë·ªôc l·∫≠p.

    üìå Khi n√†o n√™n s·ª≠ d·ª•ng Bridge Pattern?

    Khi c·∫ßn gi·∫£m s·ª± ph·ª• thu·ªôc gi·ªØa ph·∫ßn giao di·ªán (abstraction) v√† ph·∫ßn tri·ªÉn khai (implementation).
    Khi c·∫ßn h·ªó tr·ª£ nhi·ªÅu bi·∫øn th·ªÉ c·ªßa m·ªôt l·ªõp m√† kh√¥ng l√†m tƒÉng ƒë·ªô ph·ª©c t·∫°p c·ªßa h·ªá th·ªëng.
*/

// Example

interface Color {
    fun applyColor(): String
}

class Red: Color {
    override fun applyColor(): String = "Red"
}

class Blue: Color {
    override fun applyColor(): String = "Blue"
}

abstract class Shape(protected val color: Color) {
    abstract fun draw(): String
}

class Circle(color: Color): Shape(color) {
    override fun draw(): String = "Drawing Circle in ${color.applyColor()}"
}

class Square(color: Color): Shape(color) {
    override fun draw(): String = "Drawing Square in ${color.applyColor()}"
}

fun main() {
    val redCircle = Circle(Red())
    val blueSquare = Square(Blue())
    println(redCircle.draw())
    println(blueSquare.draw())
}