package com.example.designpattern.behavioralpatterns

import kotlin.math.exp

/*
   @Date: 21/02/2025
   @Written by: Nguyen Trung Thanh
*/

/*
    üìå Khi n√†o n√™n d√πng?
    ‚úÖ Khi c·∫ßn x·ª≠ l√Ω bi·ªÉu th·ª©c to√°n h·ªçc ho·∫∑c ng√¥n ng·ªØ ƒë∆°n gi·∫£n.
    ‚úÖ Khi c√≥ ng·ªØ ph√°p nh·ªè, d·ªÖ qu·∫£n l√Ω.
    ‚úÖ Khi c·∫ßn m·ªü r·ªông c√∫ ph√°p d·ªÖ d√†ng.
*/  

// Build Small Computer

interface Expression {
    fun interpreter(): Int
}

class Number(private val value: Int): Expression {
    override fun interpreter() : Int{
        return value
    }
}

class Add(private val a: Expression, private val b: Expression): Expression {
    override fun interpreter(): Int {
        return a.interpreter() + b.interpreter()
    }
}
class Subtract(private val a: Expression, private val b: Expression): Expression {
    override fun interpreter(): Int {
        return a.interpreter() - b.interpreter()
    }
}

class Multiple(private val a: Expression, private val b: Expression): Expression {
    override fun interpreter(): Int {
        return a.interpreter() * b.interpreter()
    }
}

class Divider(private val a: Expression, private val b: Expression): Expression {
    override fun interpreter(): Int {
        return a.interpreter() / b.interpreter()
    }
}
fun main() {
    val expression: Expression = Subtract(
        Add(Number(2), Number(3)), Multiple(Number(1), Number(2))
    )
    println(expression.interpreter())
}