package com.example.designpattern.behavioralpatterns

import android.os.Build
import androidx.annotation.RequiresApi

/*
   @Date: 21/02/2025
   @Written by: Nguyen Trung Thanh
*/



/*
  Memento Pattern gi√∫p l∆∞u v√† kh√¥i ph·ª•c tr·∫°ng th√°i c·ªßa m·ªôt ƒë·ªëi t∆∞·ª£ng m√† kh√¥ng ƒë·ªÉ l·ªô chi ti·∫øt b√™n trong c·ªßa n√≥.

    Memento: ƒê·ªëi t∆∞·ª£ng l∆∞u tr·ªØ tr·∫°ng th√°i.
    Originator: ƒê·ªëi t∆∞·ª£ng g·ªëc c√≥ th·ªÉ t·∫°o v√† kh√¥i ph·ª•c tr·∫°ng th√°i.
    Caretaker: L·ªõp qu·∫£n l√Ω c√°c tr·∫°ng th√°i ƒë√£ l∆∞u (v√≠ d·ª•: m·ªôt danh s√°ch ƒë·ªÉ h·ªó tr·ª£ Undo/Redo).
*/

/*
    üìå Khi n√†o n√™n d√πng?
    ‚úÖ Khi b·∫°n c·∫ßn Undo/Redo.
    ‚úÖ Khi c·∫ßn l∆∞u tr·∫°ng th√°i tr∆∞·ªõc khi thay ƒë·ªïi.
    ‚úÖ Khi mu·ªën b·∫£o v·ªá tr·∫°ng th√°i n·ªôi b·ªô c·ªßa ƒë·ªëi t∆∞·ª£ng.
*/
class Memento(val state: String)

class TextEditor {
    private var content: String = ""
    fun write(text: String) {
        content += text
    }
    fun printContent() {
        println("Noi dung hien tai la: $content")
    }
    fun save(): Memento {
        return Memento(content)
    }
    fun restore(memento: Memento) {
        content = memento.state
    }
}

class History {
    private val mementos = mutableListOf<Memento>()

    fun save(memento: Memento) {
        mementos.add(memento)
    }
    @RequiresApi(Build.VERSION_CODES.VANILLA_ICE_CREAM)
    fun undo(): Memento? {
        return if (mementos.isNotEmpty()) mementos.removeLast() else null
    }
}

@RequiresApi(Build.VERSION_CODES.VANILLA_ICE_CREAM)
fun main() {
    val textEditor = TextEditor()
    val historyManagement = History()
    // save
    textEditor.write("Hello")
    textEditor.printContent()
    historyManagement.save(textEditor.save())
    textEditor.write("World")
    textEditor.printContent()
    historyManagement.save(textEditor.save())
    textEditor.write("abc")
    textEditor.printContent()
    historyManagement.undo()?.let {
        textEditor.restore(it)
    }
    textEditor.printContent()
}