package com.example.designpattern.behavioralpatterns

import kotlin.math.pow

/*
    @Date: 21/02/2025
    @Written by: Nguyen Trung Thanh
*/

/*
    The Visitor Pattern is a behavioral design pattern that allows you to add further operations to objects without modifying their structures.
    It is particularly useful when working with complex object hierarchies.

    When to Use the Visitor Pattern?
        - When you need to perform multiple operations on an object structure without modifying the classes.
        - When new operations need to be added frequently but the object structure should remain unchanged.
        - When you want to separate algorithms from the data structures they operate on.
    üìå Khi n√†o n√™n d√πng?
    ‚úÖ Khi b·∫°n c·∫ßn th√™m nhi·ªÅu h√†nh vi m√† kh√¥ng mu·ªën s·ª≠a ƒë·ªïi c√°c l·ªõp c≈©.
    ‚úÖ Khi c√≥ nhi·ªÅu ki·ªÉu ƒë·ªëi t∆∞·ª£ng nh∆∞ng h√†nh vi gi·ªëng nhau (vd: nhi·ªÅu lo·∫°i h√¨nh h·ªçc c·∫ßn t√≠nh di·ªán t√≠ch).
    ‚úÖ Khi c·∫ßn duy tr√¨ nguy√™n t·∫Øc m·ªü-ƒë√≥ng (Open/Closed Principle).

    Key Concepts:
        - Visitor: Defines operations to be performed on elements of the object structure.
        - Element: Objects that accept a visitor.
        - ConcreteVisitor: Implements specific operations for the visitor.
        - ConcreteElement: Specific object that accepts a visitor.

*/

/*
    üî• V√≠ d·ª• th·ª±c t·∫ø:

    Android View Hierarchy: Duy·ªát c√¢y View v√† th·ª±c hi·ªán h√†nh ƒë·ªông (vd: ƒëo k√≠ch th∆∞·ªõc, v·∫Ω).
    Tr√¨nh bi√™n d·ªãch (Compiler): Duy·ªát AST (Abstract Syntax Tree) v√† th·ª±c hi·ªán ki·ªÉm tra l·ªói, t·ªëi ∆∞u m√£.
    X·ª≠ l√Ω file (XML, JSON): Duy·ªát c·∫•u tr√∫c d·ªØ li·ªáu v√† th·ª±c hi·ªán c√°c thao t√°c kh√°c nhau tr√™n m·ªói ph·∫ßn t·ª≠.
*/


// Example
interface Visitor {
    fun visitRectangle(rectangle: Rectangle)
    fun visitCircle(circle: Circle)
}

interface Shape {
    fun accept(visitor: Visitor)
}

class Rectangle(val width: Double, val height: Double) : Shape {
    override fun accept(visitor: Visitor) {
        visitor.visitRectangle(this)
    }
}

class Circle(val radius: Double): Shape {
    override fun accept(visitor: Visitor) {
        visitor.visitCircle(this)
    }
}

class AreaCalculator: Visitor {
    override fun visitRectangle(rectangle: Rectangle) {
        val area = rectangle.height * rectangle.height
        println("Rectangle area is: $area")
    }

    override fun visitCircle(circle: Circle) {
        val area = Math.PI * circle.radius.pow(2.0)
        println("Circle area is: $area")
    }
}


class ShapeDrawer : Visitor {
    override fun visitRectangle(rectangle: Rectangle) {
        println("V·∫Ω H√¨nh Ch·ªØ Nh·∫≠t c√≥ k√≠ch th∆∞·ªõc ${rectangle.width}x${rectangle.height}")
    }

    override fun visitCircle(circle: Circle) {
        println("V·∫Ω H√¨nh Tr√≤n v·ªõi b√°n k√≠nh ${circle.radius}")
    }
}

fun main() {
    val shapes = mutableListOf(
        Circle(2.0), Rectangle(1.0, 2.0)
    )
    val areaCalculator = AreaCalculator()
    val shapeDrawer = ShapeDrawer()
    for (shape in shapes) {
        shape.accept(shapeDrawer)
    }
    for (shape in shapes) {
        shape.accept(areaCalculator)
    }
}